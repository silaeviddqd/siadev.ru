name: Publish Docker image & run it on VM & run it on VM

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME}}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD}}
    steps:
      - name: Берем код
        uses: actions/checkout@v4
      
      - name: Настройка Docker buildx
        uses: docker/setup-buildx-action@v3
      - name: Авторизация в YC
        env:
          SERVICE_ACCOUNT_KEY: ${{ secrets.YC_SERVICE_ACCOUNT_KEY }}
        run: |
          echo "${SERVICE_ACCOUNT_KEY}" | docker login --username oauth --password-stdin cr.yandex

      - name: Кэшируем слои докера
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Закидываем образ в YC
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: cr.yandex/crpsf58ad0hhb5dj9q2f/siadev:${{ github.ref_name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          build-args:
            SSL_CERT:${{ secrets.SSL_CERT }}
            SSL_KEY:${{ secrets.SSL_KEY }}

  deploy:
    needs: build-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Берем код
        uses: actions/checkout@v4

      - name: Деплоим через SSH
        uses: appleboy/ssh-action@v1.0.3
        env:
          SERVICE_ACCOUNT_KEY: ${{ secrets.YC_SERVICE_ACCOUNT_KEY }}
          IMAGE_NAME: cr.yandex/crpsf58ad0hhb5dj9q2f/siadev
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          envs: SERVICE_ACCOUNT_KEY, IMAGE_NAME
          script: |
            echo "${SERVICE_ACCOUNT_KEY}" | docker login --username oauth --password-stdin cr.yandex
            docker service rm siadev_service
            docker secret rm ssl_cert ssl_key | true
            echo "${{ secrets.SSL_CERT }}" | docker secret create ssl_cert --label cert -
            echo "${{ secrets.SSL_KEY }}" | docker secret create ssl_key --label cert -
            docker service update --image $IMAGE_NAME:${{ github.ref_name }} siadev_service || \
            docker service create --name siadev_service --secret source=ssl_cert,target=/etc/nginx/ssl/siadev.crt --secret source=ssl_key,target=/etc/nginx/ssl/siadev.key --publish 80:80 $IMAGE_NAME:${{ github.ref_name }}